内容安排
1.网络编程
2.进程线程
3.正则表达式
4.mongodb数据库
5.git使用
6.项目




网络编程

网络功能:数据的传输


iso(国际标准化组织)

osi七层模型--->网络通信标准化流程

应用层 : 提供用户服务,具体功能由程序实现
表示层 : 数据的压缩优化和加密
会话层 : 建立应用层连接,选择合适的传输服务
传输层 : 提供传输服务,进行流量控制
网络层 : 路由选择,网络互联
链路层 : 进行数据交换,控制具体消息接受
物理层 : 提供物理硬件的传输,网卡 接口设置 传输介质
 

osi七层模型的优势 
1.建立了统一的网络工作流程
2.每个层次功能清晰,各司其职
3.降低了耦合度,方便了开发流程


cookie:
    高内聚 :  模块功能尽可能的单一,不要互相参杂
    低耦合 : 模块之间的关联影响尽可能少


四层模型 (tcp/ip模型)
应用层 传输层 网络层 物理链路层

*将应用层 表示层 会话层统一为应用层,便于开发实践


五层模型
应用层 传输层 网络层 链路层 物理层

数据的传输流程
1. 发送端由应用层逐层根据协议添加首部信息,最终在物理层实现发送
2.发送的消息经过中间多个节点转发到达目标主机
3.目标主机根据协议逐层解析首部,最终到达应用层回去数据


网络协议:网络通信双发都准守的规定,包括建立什么数据结构,消息结构,首部内容等

网络编程基本概念

网络主机: 在网络中标识一台主机的标识

本地使用: "localhost"  "127.0.0.1"  本地计算机  访问只能用 127.0.0.1


网络使用: 用当前计算机的ip地址 "192.168.43.128" 表示本台计算机 
            "0.0.0.0" 自动选择一个可用网卡 写程序的时候用 若想访问自己或者被其他人访问 需要 ip地址


ifconfig : 查看本机网络信息 


IP地址:
    在网络上查找一台主机的网络位置
    IPv4: 点分十进制表达 --192.168.43.128  三个点分四块 每块取值范围是0-255 每块转为2进制 11111111  总32位 共有2**32个ip地址

    IPv6:扩充地址的范围


    ping [ip]: 网络连接测试

特殊 ip
  127.0.0.1 本机测试ip
  0.0.0.0 本机自动获取能够使用的网卡ip
  192.168.1.0  表达一个网段
  192.168.1.1 表示网关地址
  192.168.1.255 表示广播地址


域名:
    网络服务器的别名  DNS解析域名 返回一个IP地址 用来访问
    作用:方便记忆,表达一定的含义

端口号 port  
  端口号是网络地址的一部分,用于区分主机上不同的网络应用
  
  *在一个系统中应用监听的端口不重复
  取值范围:1--65535    
  
   1--255 不会用 一些总所周知的公共程序端口
   256--1023 系统应用端口 
   1024--65535 自用端口  尽量用大于10000的

网络字节序
    网络上的数据传输的排列方式


    掘金 python 程序员

传输层服务
面向连接的传输服务(基于TCP协议的传输)
 传输特征:
        他提供可靠的数据传输,可靠性指的是传输过程中无丢失,无失序,无差错,无重复
    
 实现手段:在通信前需要建立通信连接,通信结束需要段开连接

 连接过程(三次握手):建立TCP连接的过程
 1.客户端向服务端发起连接请求
 2.服务端收到客户端请求报文(消息序列) 回复报文消息表示可以连接
 3.客户端收到服务端回复,再从发送报文最终建立连接

 连接断开(四次挥手)
 1.主动方发送报文提出断开连接
 2.被动方接收到断开请求,立即返回消息表示开始准备断开
 3.被动方处理消息完毕,完成断开准备,再次发送报文表示可以断开
 4.主动方收到断开指令发送报文,最终确认断开

 适用情况: 对数据传输有准确性的要求,传输文件较大,需要确保传输可靠性
        比如:网页获取,文件下载,邮件收发
    


面向无连接的传输服务(基于UDP协议的传输)
  传输特征:不保证传输的可靠性,数据传输不需要提前建立连接

  适用情况:网络情况较差,对传输可靠性要求不高
        比如:网络视频,群聊,广播

要求:
  1. osi七层模型介绍一下,tcp/ip 模型是什么
  2.tcp服务和udp服务有什么区别,tcp udp是哪层协议
  3.简单描述下三次握手和四次握手的过程


socket 模块

    功能: python的标准库模块,提供网络编程的一系列接口功能
 
    简单函数示例:
            获取计算机名
            socket.gethostname()
            "tedu"
            通过域名获取主机地址
            socket.gethostbyname("www.baidu.com")

            查看指定服务器的端口
            socket.getservbyname("mysql")
            3306
           
            查看端口对应的服务程序
            socket.getservbyport(3306)
            mysql
            
            查看指定服务器信息(服务器名,别名,ip)
            socket.gethostbyaddr("localhost")
            ('localhost', [], ['127.0.0.1'])

            将点分十进制地址转为二进制
            socket.inet_aton("192.168.1.1")
            b'\xc0\xa8\x01\x01'

            将二进制地址转换为点分十进制
    ode())inet_ntoa(b'\xc0\xa8\x01\x01')
    ode())8.1.1'
 套ode())程,进行数据传输的一种编程方案,通过socket模块提供的接口函数进行组合搭配实现
    ode())
    
    
    套接字:网络编程的方式
    套接字的分类:
            流式套接字:(SCOK_STREAM)
            服务端:
            socket()---bind()----listen()---accept()---recv()/send()--close()
            客户端:
            socket()---connect()---sen()---close()    
                特征:面向连接的传输服务,能够保证传输可靠性,是基于tcp请求的一种套接字,数据传输使用字节流传输

            数据报套接字:(SOCK_DGRAM)
                特征:面向无连接的传输服务,不保证传输可靠,是基于udp请求的一种套接字,使用数据报进行传输


tcp流式套接字编程:
    服务端流程 
    tcp传输特征:
        1.当一端退出时,如果连接端阻塞在recv,此时recv会立即结束阻塞返回空字符串
        2.如果连接端关闭,再调用send企图发送时会出现异常

        1.创建套接字
         sockfd = socket(socket_family = AF_INET,socket_type = SOCK_STREAM,proto=0)

         功能:创建套接字
         参数: socket_family : 地址族类型 AF_INET-->表示ipv4
              socket_type: 套接字类型  SCOK_STREAM-->表示流式套接字
                                     SOCK_DGRAM--->表示数据报套接字
              proto : 通常为0
              返回值:套接字对象
        
        2.绑定服务器地址

        sockfd.bind(addr) 只有一个参数 参数是元组("127.0.0.1",8888)
        功能:绑定服务器网络地址
        参数:元组(ip,port)-----("127.0.0.1",8888)


        3.设置套接字监听
         sockfd.listen(n)
         功能:将套接字设置为监听套接字并创建监听队列
         参数:监听队列大小
            *一个监听套接字能够连接多个客户端套接字
        
        4.等待处理客户端连接

        connfd,addr = sockfd.accept()
        功能:阻塞等待处理客户端连接请求
        返回值:connfd 生成的新的客户端连接套接字
                addr 连接的客户端的地址
            
         *阻塞函数:程序运行中遇到阻塞函数则暂停执行,直到阻塞条件满足后再继续执行

        5.收发消息
         data = connfd.recv(buffersize)
         功能:接收tcp消息
         参数: 每次最多接收消息大小(字节)
         返回值:接收到的内容

         n = connfd.send(data)
         功能:发送tcp消息
         参数:要发送的内容(bytes格式)
         返回值:发送的字节数

         str ---> bytes  encode()
         bytes --> str  decode()
        

        6.关闭套接字
          sockfd.close()
          功能:关闭套接字
    
客户端
    1.创建套接字(必须相同类型套接字才能通信)
    2.请求连接
        sockfd.connect(addr)
        功能:连接服务端套接字
        参数:服务端地址
    3.消息收发
    4.关闭套接字
