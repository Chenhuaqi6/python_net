day04笔记

epoll 方法

使用方法: 基本与poll相同
    *将生成对象函数改为epoll
    *将所有关注io时间类型变为EOLL类型

epoll特点:
    *epoll是linux的专属多路复用方法
    *epoll效率比select和poll要高
    *epoll可以监控更多的io(select 最多1024)
    *epoll 支持更多的触发事件类型(EPOLLET边沿触发)  触发之后如不处理  不会一直提醒处理



结构化数据:
    import struct
    原理:将部分数据类型一起放在一起,转换成bytes格式数据包,并且可以按照指定格式解析bytes数据包

    struct.Struct(fmt)
    功能:生成struct格式包对象
    参数: fmt 定制的数据结构组成 

       e.g.  1  b"Jame" 1.75        要发送的一组数据
             st = Struct("i4sf")    生成对应数据格式对象
            常用fmt  int  i
                    bytes ns(n代表几个字符)
                    float f
    st.pack(v1,v2,v3...)
    功能:将数据按照指定格式打包为bytes
    参数: 要打包的数据
    返回值: 打包后的bytes字串

    st.unpack(bytes)
    功能:将bytes格式数据包解析
    参数:要解析的数据包
    返回值:数据元组
    
    pack() 和 unpack()可以通过struct模块直接调用(多一个参数,也就是接收格式fmt)

    struct.pack(fmt,v1,v2...)  
    struct.unpack(fmt,data)

cookie: 

    LINUX 文件类型 bcd-lsp

    b(块设备文件:驱动文件) c(字符设备文件) d(目录) -(普通文件)  l(链接文件) s(套接字文件) p(管道文件)

本地套接字的作用:
    用于本地不同的程序间进行通信

创建流程:
    1.创建本地套接字
    sockfd = socket(AF_UNIX,SOCK_STREAM)
    2.绑定本地套接字文件
        *选定文件位置和名称
        *sockfd.bind(path)
    3.监听  sockfd.listen()
    4.连接
      sockfd.accept()
    5.消息收发
      recv send

    cookie
    import os
    os.path.exists(path)
    功能: 判断一个文件是否存在
    参数:目标文件
    返回值 :存在返回true 否则false

    os.remove() os.unlink()
    功能:删除一个文件
    参数:目标文件

多任务编程
   意义:充分利用计算机的多核资源,同时运行多个任务,以提高程序的执行效率
   定义:通过应用程序利用计算机的多个核心达到同时执行地讴歌任务的目的,一次提高
        计算机运行效率

实施方案:多进程 多线程

并行: 多个计算机核心在同时处理多个任务,这时多个任务间是并行关系


并发:同时处理多个任务,内核在多个任务间不断的切换,达到好像多个任务同时被执行的效果
    但实际一个时刻内核只能处理处理其中一个任务

进程 (Process)

定义: 程序在计算机中的一次运行过程

程序: 是一个可执行的文件,是静态的占有磁盘空间,不占有计算机的运行资源
进程: 进程是一个过程的描述,占有计算机的资源,有一定的生命周期

*同一个程序的不同进程是不同的进程,占用资源和生命周期都不一样


进程的创建流程
1.用户空间通过运行程序或者调用接口发起创建进程
2.操作系统接受用户请求,开始创建进程
3.操作系统分配计算及资源,确定进程状态,开辟进程空间等工作
4.操作系统将进程提供给用户使用 

cpu时间片

如果有一个进程占有cpu内核,我们称为该进程在cpu时间片上
*多个任务之间是争夺cpu的关系
*谁占有cpu最终是操作系统决定的


pcb (进程控制块)
在内存中开辟的一块空间,用来记录进程的信息

*进程控制块是操作系统调用进程的重要标志


进程ID(PID):系统为每个进程分配一个不重复的ID号,是该进程在系统中的标识
        查看进程: ps -aux

进程信息: ps -aux
PID(Process ID ) :在操作系统中每个进程都有一个唯一的id号用来区别于其他进程,ID号有操作系统自动分配,是一个大于0的整数

父子进程:
    在系统中除了初始化进程,每一个进程都有唯一的父进程,可能有0个或则多个子进程,由此形成父子进程关系
 
    查看进程树: pstree
    查看父进程的pid  ps -ajx

进程的状态

三态
  * 就绪态 : 进程具备执行条件,等待系统分配资源
  * 运行态 : 进程占用cpu处于运行状态
  * 等待态 :进程暂时不具备执行条件,阻塞等待满足条件后再执行


五态 (三态基础上增加新建态,终止态)
    *新建态: 创建一个新进程,获取资源的过程
    *终止态: 进程执行结束,资源释放回收的过程
ps -aux ---->STAT

S 等待态 (可中断等待)
D 等待态 (不可中断等待)
T 等待态  (暂停状态)
R 运行态
Z 僵尸


linux 优先级范围 -20 ---- 19 数字越小优先级越高

查看优先级   top

以某个优先值运行 nice -9/--9 Python3 程序

<  有较高优先级的
N  有较低优先级的
+  前台进程
s  会话组组长
l  有进程链接

后台运行进程:  运行命令后加 &
eg: Python3 while.py &


kill -9 pid号    杀死进程

要求:
    1.什么是进程,进程和程序区别
    2.进程有哪些状态,各种状态如何转换

进程运行特征:
    1.进程可以使用计算机多核资源
    2.进程是计算机分配资源的最小单位
    3.进程之间的运行互不干扰,相互独立
    4.每个进程空间独立有自己的空间资源

进程创建

import os
pid = os.fork()
功能:创建新的进程
返回值:失败 返回一个负数 
      成功 原进程中返回新进程的pid号
          新进程中返回 0
作业:理解fork的使用

父进程执行fork 子进程从fork下面执行